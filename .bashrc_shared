# (This script is only intended to be run in interactive shells.)

echo "Executing: .bashrc"

# Prompt

# Returns "*" if git working directory is dirty.
function git_dirty {
    [[ $(git status 2> /dev/null | tail -n1) != "nothing to commit, working tree clean" ]] && echo "*"
}

# Returns the name of the current git branch
# or fails if not in a git repository or git isn't installed.
function git_branch {
    # Abort with error if not in a git repository
    git rev-parse --inside-work-tree >/dev/null 2>&1 || return
    
    local branch
    if branch="$(git symbolic-ref -q --short HEAD)"; then
        echo "${branch}$(git_dirty)"
    else
        # In detached head state, use commit instead
        echo "$(git rev-parse --short -q HEAD)$(git_dirty)"
    fi
}

function prompt {
    # [Cathode ~ <extra>]
    # $
    
    # ANSI color codes: https://gist.github.com/chrisopedia/8754917
    local GREEN='\[\e[0;32m\]'
    local CYAN='\[\e[0;36m\]'
    local BOLD_BLUE='\[\e[1;34m\]'
    local BOLD_YELLOW='\[\e[1;33m\]'
    local RESET='\[\e[m\]'
    
    local EXTRA=''
    local GIT_BRANCH=$(git_branch)
    if [ ! -z $GIT_BRANCH ]; then
        EXTRA="$EXTRA $GIT_BRANCH"
    fi
    if [ ! -z $SPLUNK_HOME ]; then
        local SPLUNK_BRANCH=`basename $SPLUNK_HOME`
        EXTRA="$EXTRA $SPLUNK_BRANCH"
    fi
    if [ ! -z $VIRTUAL_ENV ]; then
        local VIRTUAL_ENV_NAME=`basename $VIRTUAL_ENV`
        EXTRA="$EXTRA $VIRTUAL_ENV_NAME"
    fi
    if [ ! -z "$EXTRA" ]; then
        EXTRA="${BOLD_YELLOW}${EXTRA}"
    fi
    
    case `id -u` in
        0) local PCHAR="#";;
        *) local PCHAR="\$";;
    esac
    PS1="${GREEN}[\h ${CYAN}\D{%F %T} ${BOLD_BLUE}${PWD}${EXTRA}${GREEN}]\n${GREEN}${PCHAR} ${RESET}"
}
export PROMPT_COMMAND=prompt

# ls colors
# See the 'ls' manpage for more info about LSCOLORS
# Affect: ddllssppeebbccuuggdddd"
LSCOLORS="exfxcxdxbxegedabagacad"
alias ls='ls -G '

# ll
alias ll='ls -l '

# grep colors
alias grep='grep --color=auto'

# This script
DOTFILES_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
alias editrc='edit ~/.bashrc'
alias editrc2='edit "$DOTFILES_DIR/.bashrc_shared"'
alias editrcs='edit "$DOTFILES_DIR/splunk.rc"'
alias gorc2='cd "$DOTFILES_DIR"'
alias refresh='source ~/.bashrc'
alias reload=refresh

# Personal bin directories
PATH="$PATH:$HOME/bin"          # local
PATH="$PATH:$DOTFILES_DIR/bin"  # shared

# CVS
EDITOR=nano
VISUAL="${EDITOR}"

# SVN
SVN_EDITOR=nano
alias sup='svn up '
alias sci='svn ci '
alias sst='svn status '
alias sdi='svn diff '

# Git
export GIT_EDITOR='subl -w'     # Sublime as primary Git editor
#export GIT_EDITOR=nano
alias gd='gitx --diff -w '      # Diff using GitX. Ignore whitespace.
alias gdh='gd HEAD'             # Diff filesystem to HEAD.
gdc () { gd $1^ $1; }           # Show changes in a particular commit.
alias gdch='gdc HEAD'           # Show changes in the last commit.
gdcst () { gd stash@{$1}^ stash@{$1}; } # Show changes in a stashed commit.
alias gs='git status'           # Summarize filesystem changes relative to HEAD.
alias gb='git branch'
alias gbd='git branch -d '      # Delete local branch only.
gbd2 () {                       # Delete remote & local (if present) branches.
    git push origin :$1;
    git branch -D $1;
}
gpod () { git push origin :$1 ; }           # Delete remote branch.
alias gx='gitx --all'                       # Open GitX and show all branches.
alias gcam='git add -A; git commit -m '     # Commit everything in filesystem.
alias gaa='git add -A'                      # Stage everything in filesystem.
alias ga='git add '                         # Stage specific file.
alias gcm='git commit -m '                  # Commit staged changes.
alias gca='git commit --amend '             # Rewrite the last commit.
alias gc='git checkout '                    # Checkout branch.
alias gcb='git checkout -b '                # Create branch and checkout.
alias gri='git rebase -i '                  # Interactive rebase: Squash, reorder, amend, and edit unpublished commits.
alias gcp='git cherry-pick '                # Merge branch $2 to $1 and delete it.
gmb () { git checkout $1 && git merge $2 && git branch -d $2; }
                                            # Merge branch $1 with $2 and delete $2.
alias gstl='git stash list'                 # List stashed commits.
alias gsts='git stash save'                 # Stash a new commit.
gsta () { git stash apply "stash@{$1}"; }   # Apply a stashed commit to the filesystem.
gstd () { git stash drop "stash@{$1}"; }    # Delete a stashed commit.
gpo () {                                    # Push local commits to origin repository.
    CURRENT_BRANCH=`git branch | grep '*' | cut -c 3-` &&
    git push -u origin "$CURRENT_BRANCH";
}
alias gf='git fetch -p '                    # Fetch commits from remote repository (usually origin) and
                                            #     delete local refs to remote branches that no longer exist.
alias gp='git pull --ff-only '              # Same as 'gf', but attempts to merge with the current branch.
ghooks () {                                 # Install shared Git hooks in local repository.
    ln -s "$DOTFILES_DIR/git_hooks/pre-commit" ./.git/hooks/pre-commit;
}
                                            # Show graph of commits stemming from HEAD.
alias gsg="git log --graph --pretty=format:'%Cred%h%Creset %C(bold blue)<%an>%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr)' --abbrev-commit "
                                            # Show graph of commits stemming from all branches.
alias gsgb='gsg --branches '
alias gsur='git submodule update --recursive'
alias gstp='git stash pop'
alias grd='git rebase develop '
alias gmff='git merge --ff-only '
alias gmnff='git merge --no-ff '
alias grid='gri develop'

# GitHub
alias gh='open -a GitHub'
ghpr () {    # Creates a pull request on GitHub for the current branch.
    PWD=`pwd` &&
    REPO_PATH=`git config --get remote.origin.url | sed 's|git@github.com:\([^/]*\)/\([^.]*\).git|\1/\2|g'` &&
    CURRENT_BRANCH=`git status | head -n 1 | cut -c 13-` &&
    open "https://github.com/$REPO_PATH/pull/new/splunk:develop...$CURRENT_BRANCH";
}
alias gprc=ghpr

# p4
padd () {
    # Add file $1 or directory $1 (recursively) to the default changelist.
    # WARNING: Includes ALL files, such as *.pyc or *.o.
    find $1 -type f -print | p4 -x - add;
}
alias p4v='open -a p4v'             # Open visual Perforce client.
p4cr () {
    # Creates a code review for pending changelist $1 with message $2.
    # Requires banter <https://github.com/markdrago/banter> to be installed and configured.
    #   url: http://crucible.splunk.com/
    #   project_key: SPLCR
    #   default_reviewer: <your username>
    p4diff $1 | banter -t "$2"
}
p4-postmove () {
    # p4 postmove $1 $2
    # 
    # Converts {$1=delete, $2=add} to {$1=move/delete, $2=move/add}.
    # 
    # Useful to add move-related history information to a diff that
    # was applied to a p4 workspace, such as through
    # 'git p4 submit --prepare-p4-only'.
    # 
    if [ ! -f "$2" ]; then
        echo "*** Destination file expected to already exist: $2" ;
        return ;
    fi
    if [ -f "$1" ]; then
        echo "*** Source file expected to already be missing: $1" ;
        echo "*** This command is not designed to support a simultaneous move & add of the source file." ;
        return ;
    fi
    p4 revert "$1" ;
    mv -f "$2" "$1" ;
    p4 revert "$2" ;
    p4 edit "$1" ;
    p4 move "$1" "$2" ;
}

# git-p4
alias gp4='git-p4 '                             # 'git p4' not sufficient
alias gp4r='gp4 rebase '
alias gp4s='gp4 submit '                        # Submit to p4
alias gp4sp='gp4 submit --prepare-p4-only'      # Put current change in p4
alias gbfm='git branch -f master p4/master'     # Move master up to p4/master

# git-p4 + Crucible
# (Generate diff for Crucible code review. Takes OLD..NEW as argument.)
alias gdcr='git diff -U1000 --no-prefix '
# (Create code review diff $3.diff for $1..$2)
cr () {
    gdcr $1 $2 > ~/Desktop/Commits/$3.diff
}
# (Create code review diff $1.diff for HEAD^..HEAD)
cr1 () {
    cr HEAD^ HEAD $1
}

# Docker
alias docker-cleanup="docker ps -q -f status=exited | xargs docker rm -v"
    # Remove all stopped containers and their volumes
alias docker-cleanupi="docker images | grep '<none>' | awk '{print $3}' | xargs docker rmi"
    # Remove all untagged images

# Windows emulation
alias dir=ls
dirs () { find . -iname "*$1*"; }   # dir /s <filename>
alias st='open .'                   # st -> start .

# SQLite
alias sqlite='rlwrap sqlite' # wrap with readline support

# DNS
# (If changes are made to the /etc/hosts file, use this to make the system notice)
alias edithosts='edit /etc/hosts'
alias reloadhosts='dscacheutil -flushcache'

# Text Editor: Sublime Text
alias edit='subl '

# Markdown Editor: Mou
md () {
    [ ! -f "$1" ] && touch "$1";    # create if doesn't exist
    open -a Mou "$1";
}

# PNG Crush
pngc () { pngcrush "$1" "$1-"; }

# preman
# (This converts a MAN page to a Postscript file and then opens the Postscript
#  file in Preview. This is useful for reading long man pages.)
# (This is based on a script by Spencer Cohen.)
preman () {
    man -t $1 > /tmp/$1.ps &&
    open /tmp/$1.ps;
}

# backupsleep -- Perform a Time Machine Backup and then sleep the computer.
alias backupsleep="tmutil startbackup -b && osascript -e 'tell app \"Finder\" to sleep'"

# Python: Style checking
#   W293 blank line contains whitespace
#   W291 trailing whitespace
#   (E302 expected 2 blank lines, found 1)
#   E501 line too long
pstyle () { pep8 "$1" | grep -v W293 | grep -v W291 | grep -v E501; }

# Python: Misc
editpy () {
    MODULE_DIRPATH=$(python3 -c "import os.path; import $1; print(os.path.dirname($1.__file__))")
    edit $MODULE_DIRPATH
}

# Print a terminal bell character
alias bell='tput bel'
